def inicializar_tabuleiro():
    return [[' ' for _ in range(3)] for _ in range(3)]

def exibir_tabuleiro(tabuleiro):
    for linha in tabuleiro:
        print('|'.join(linha))
        print('-' * 5)

def verificar_vitoria(tabuleiro, jogador):
    for linha in tabuleiro:
        if all([celula == jogador for celula in linha]):
            return True
    for coluna in range(3):
        if all([tabuleiro[linha][coluna] == jogador for linha in range(3)]):
            return True
    if all([tabuleiro[i][i] == jogador for i in range(3)]) or all([tabuleiro[i][2 - i] == jogador for i in range(3)]):
        return True
    return False

def verificar_empate(tabuleiro):
    return all([celula != ' ' for linha in tabuleiro for celula in linha])

def obter_jogada():
    while True:
        try:
            linha, coluna = map(int, input("Digite a linha e a coluna (0, 1 ou 2): ").split())
            if linha in range(3) and coluna in range(3):
                return linha, coluna
            else:
                print("Entrada inválida. Tente novamente.")
        except ValueError:
            print("Entrada inválida. Tente novamente.")

def jogar():
    tabuleiro = inicializar_tabuleiro()
    jogador_atual = 'X'
    while True:
        exibir_tabuleiro(tabuleiro)
        print(f"Jogador {jogador_atual}, é sua vez.")
        linha, coluna = obter_jogada()
        if tabuleiro[linha][coluna] == ' ':
            tabuleiro[linha][coluna] = jogador_atual
            if verificar_vitoria(tabuleiro, jogador_atual):
                exibir_tabuleiro(tabuleiro)
                print(f"Jogador {jogador_atual} venceu!")
                break
            elif verificar_empate(tabuleiro):
                exibir_tabuleiro(tabuleiro)
                print("Empate!")
                break
            jogador_atual = 'O' if jogador_atual == 'X' else 'X'
        else:
            print("Posição já ocupada. Tente novamente.")

if __name__ == "__main__":
    jogar()
